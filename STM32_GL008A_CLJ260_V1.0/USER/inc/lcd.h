#ifndef __LCD_H
#define __LCD_H		
#include "setup.h" 
#include "stdlib.h"
//////////////////////////////////////////////////////////////////////////////////	 
//7寸 TFT液晶驱动	  	
//********************************************************************************
//无
//////////////////////////////////////////////////////////////////////////////////	 

//LCD重要参数集
typedef struct  
{										    
	u16 width;			//LCD 宽度
	u16 height;			//LCD 高度
	u16 id;				//LCD ID（ATK-7' TFTLCD不支持id读）
	u8  dir;			//横屏还是竖屏控制：0，竖屏；1，横屏。	
	u16 sysreg;			//PREF寄存器，设置当前操作页，显示页和背光等（ATK-7' TFTLCD暂不支持横竖屏设置，统一为横屏）。	
	u8	wramcmd;		//开始写gram指令
	u8  setxcmd;		//设置x坐标指令
	u8  setycmd;		//设置y坐标指令	 
}_lcd_dev; 	  

//LCD参数
extern _lcd_dev lcddev;	//管理LCD重要参数
//LCD的画笔颜色和背景色	   
extern u16  POINT_COLOR;//默认红色    
extern u16  BACK_COLOR; //背景颜色.默认为白色


//////////////////////////////////////////////////////////////////////////////////	 
//-----------------LCD端口定义---------------- 
//#define	LCD_LED PBout(0) 	//LCD背光不由IO口控制,有驱动器自己控制,通过指令设置   
#define	LCD_RST PBout(0) 		//LCD复位口,和开发板共用,这里设置为PB0,其实并没有用到    
//LCD地址结构体
typedef struct
{
	u16 LCD_REG;
	u16 LCD_RAM;
} LCD_TypeDef;
//使用NOR/SRAM的 Bank1.sector4,地址位HADDR[27,26]=11 A10作为数据命令区分线 
//注意设置时STM32内部会右移一位对其! 111110=0X3E			    
#define LCD_BASE        ((u32)(0x6C000000 | 0x000007FE))
#define LCD             ((LCD_TypeDef *) LCD_BASE)
//////////////////////////////////////////////////////////////////////////////////
//LCD 指令定义
#define LCD_CUR_Y  		0X00
#define LCD_CUR_X  		0X01
#define LCD_PIXELS 		0X02
#define LCD_END_X 		0X03
#define LCD_PREF 		0X05
#define LCD_MIRROR 		0X07


//////////////////////////////////////////////////////////////////////////////////
	 
//扫描方向定义
#define L2R_U2D  0 //从左到右,从上到下
#define L2R_D2U  1 //从左到右,从下到上
#define R2L_U2D  2 //从右到左,从上到下
#define R2L_D2U  3 //从右到左,从下到上

#define U2D_L2R  4 //从上到下,从左到右
#define U2D_R2L  5 //从上到下,从右到左
#define D2U_L2R  6 //从下到上,从左到右
#define D2U_R2L  7 //从下到上,从右到左	 

#define DFT_SCAN_DIR  L2R_U2D  //默认的扫描方向

//画笔颜色
#define WHITE         	 0xFFFF	 //白色
#define BLACK         	 0x0000	 //黑色 
#define BLUE         	 0x001F  //蓝色
#define BRED             0XF81F	 //紫色
#define GRED 			 0XFFE0	 //黄色
#define GBLUE			 0X07FF	 //浅蓝色
#define RED           	 0xF800	 //红色
#define MAGENTA       	 0xF81F	 //紫色
#define GREEN         	 0x07E0	 //绿色
#define CYAN          	 0x7FFF	 //蓝绿色
#define YELLOW        	 0xFFE0	 //黄色
#define BROWN 			 0XBC40  //棕色
#define BRRED 			 0XFC07  //棕红色
#define GRAY  			 0X8430  //灰色
//GUI颜色

#define DARKBLUE      	 0X01CF	 //深蓝色
#define LIGHTBLUE      	 0X7D7C	 //浅蓝色  
#define GRAYBLUE       	 0X5458  //灰蓝色
//以上三色为PANEL的颜色 
 
#define LIGHTGREEN     	 0X841F //浅绿色
#define LIGHTGRAY        0XEF5B //浅灰色(PANNEL)
#define LGRAY 			 0XC618 //浅灰色(PANNEL),窗体背景色

#define LGRAYBLUE        0XA651 //浅灰蓝色(中间层颜色)
#define LBBLUE           0X2B12 //浅棕蓝色(选择条目的反色)

//LCD分辨率设置
#define SSD_HOR_RESOLUTION		800		//LCD水平分辨率
#define SSD_VER_RESOLUTION		480		//LCD垂直分辨率
//LCD驱动参数设置
#define SSD_HOR_PULSE_WIDTH		1		//水平脉宽
#define SSD_HOR_BACK_PORCH		46		//水平前廊
#define SSD_HOR_FRONT_PORCH		210		//水平后廊

#define SSD_VER_PULSE_WIDTH		1		//垂直脉宽
#define SSD_VER_BACK_PORCH		23		//垂直前廊
#define SSD_VER_FRONT_PORCH		22		//垂直前廊
//如下几个参数，自动计算
#define SSD_HT	(SSD_HOR_RESOLUTION+SSD_HOR_BACK_PORCH+SSD_HOR_FRONT_PORCH)
#define SSD_HPS	(SSD_HOR_BACK_PORCH)
#define SSD_VT 	(SSD_VER_RESOLUTION+SSD_VER_BACK_PORCH+SSD_VER_FRONT_PORCH)
#define SSD_VPS (SSD_VER_BACK_PORCH)
//
#define  GUI_CopyColor(color1, color2) 	*color1 = color2

void LCD_Init(void);													   	//初始化
void LCD_DisplayOn(void);													//开显示
void LCD_DisplayOff(void);													//关显示
void LCD_Clear(u16 Color);	 												//清屏
void LCD_SetCursor(u16 Xpos, u16 Ypos);										//设置光标
void LCD_DrawPoint(u16 x,u16 y);											//画点
void LCD_Fast_DrawPoint(u16 x,u16 y,u16 color);								//快速画点
u16  LCD_ReadPoint(u16 x,u16 y); 											//读点 
void Draw_Circle(u16 x0,u16 y0,u8 r);										//画圆
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2);							//画线
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2);		   				//画矩形
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color);		   				//填充单色
void LCD_Color_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 *color);				//填充指定颜色
void LCD_ShowChar(u16 x,u16 y,u8 num,u8 size,u8 mode);						//显示一个字符
void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len,u8 size);  						//显示一个数字
void LCD_ShowxNum(u16 x,u16 y,u32 num,u8 len,u8 size,u8 mode);				//显示 数字
void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 *p);		//显示一个字符串,12/16字体
void Show_Str(u16 x,u16 y,u16 width,u16 height,u8*str,u8 size,u8 mode);
void Show_Str_Mid(u16 x,u16 y,u8*str,u8 size,u8 len);
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue);
u16 LCD_ReadReg(u8 LCD_Reg);
void LCD_WriteRAM_Prepare(void);
void LCD_WriteRAM(u16 RGB_Code);		  
void LCD_Scan_Dir(u8 dir);							//设置屏扫描方向
void LCD_Display_Dir(u8 dir);						//设置屏幕显示方向
void LCD_BackLightSet(u8 pwm);						//设置背光
void LCD_EndXSet(u16 x);							//设置X终点坐标
void LCD_Set_Window(u16 sx,u16 sy,u16 width,u16 height);//设置窗口

void LCD_SetDisplayLayer(u16 layer);
void LCD_SetOperateLayer(u16 layer);
void JianTou_Up(u16 x, u16 y, u8 size, u16 color);			//画向上箭头
void JianTou_Down(u16 x, u16 y, u8 size, u16 color);		//画向下箭头
void lcd_draw_bline(u16 x1, u16 y1, u16 x2, u16 y2,u8 size,u16 color);
void gui_fill_circle(u16 x0,u16 y0,u16 r,u16 color);
void gui_draw_hline(u16 x0,u16 y0,u16 len,u16 color); 
void gui_draw_vline(u16 x0,u16 y0,u16 len,u16 color); 
void Show_GB32(u16 x,u16 y,u8 *font,u8 size,u8 mode);
void TriangularRegion(u16 x1, u16 x2, u16 y1, u16 x3, u16 y3, u16 color);
void Put_AnJian(u16 x, u16 y, u16 len, u16 wid);
void AnJianPressed(u16 x, u16 y, u16 len, u16 wid);
void  GUI_LoadPic(u32 x, u32 y, u8 *dat, u32 hno, u32 lno);
void  GUI_SetColor(u16 color1, u16 color2);
#endif  
	 
	 



